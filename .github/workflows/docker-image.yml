name: docker-image & CI

on:
  push:
    branches: [master]

jobs:
  build-test-deploy:
    runs-on: self-hosted

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: kubsu
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
        options: >-
          --health-cmd "pg_isready -U kubsu"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize DB from dump
        run: |
          docker run --rm \
            --network container:${{ job.services.postgres.id }} \
            -v ${{ github.workspace }}/kubsu:/tmp \
            postgres:14 \
            psql postgresql://kubsu:kubsu@localhost:5432/kubsu -f /tmp/dump.sql

      - name: Build Docker image
        run: docker build --no-cache -t myapp:test .

      - name: Build test image
        run: docker build --target test -t myapp:test .
      
      - name: Inspect installed packages
        run: docker run --rm myapp:test pip freeze

      - name: Run tests
        run: |
          docker run --rm \
            --network container:${{ job.services.postgres.id }} \
            -e PYTHONPATH=/app \
            -e DATABASE_URL=postgresql+psycopg://kubsu:kubsu@postgres:5432/kubsu \
            myapp:test


      - name: Build prod image
        run: docker build -t myapp:latest .

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Save Docker image to archive
        run: docker save myapp:latest -o myapp.tar

      - name: Deploy to remote server
        run: |
          scp -P ${{ secrets.SSH_PORT }} myapp.tar ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/myapp.tar

          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            set -e
            podman load < ~/myapp.tar
            podman stop myapp || true
            podman rm myapp || true
            podman run -d \
              --name myapp \
              -p 127.0.0.1:8094:8094 \
              --restart=always \
              myapp:latest \
              uvicorn src.main:app --host 0.0.0.0 --port 8094 --proxy-headers
          '
